/**
 * VONQ Hiring APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  AcceptLanguageEnum,
  acceptLanguageEnumSchema,
} from '../models/acceptLanguageEnum';
import {
  Autocompletevaluesforpostingrequirementresponse,
  autocompletevaluesforpostingrequirementresponseSchema,
} from '../models/autocompletevaluesforpostingrequirementresponse';
import { Channel, channelSchema } from '../models/channel';
import { Contract, contractSchema } from '../models/contract';
import {
  Createanewcustomercontractresponse,
  createanewcustomercontractresponseSchema,
} from '../models/createanewcustomercontractresponse';
import {
  FacetAutocomplete,
  facetAutocompleteSchema,
} from '../models/facetAutocomplete';
import {
  ListchannelswithsupportforcontractsResponse,
  listchannelswithsupportforcontractsResponseSchema,
} from '../models/listchannelswithsupportforcontractsResponse';
import {
  Listcontractsavailableforacustomerresponse,
  listcontractsavailableforacustomerresponseSchema,
} from '../models/listcontractsavailableforacustomerresponse';
import {
  Multipledetailsofcustomercontractsresponse,
  multipledetailsofcustomercontractsresponseSchema,
} from '../models/multipledetailsofcustomercontractsresponse';
import { PostContract, postContractSchema } from '../models/postContract';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ContractsController extends BaseController {
  /**
   * This endpoint exposes a list of channels with support for contracts. For all of the required details
   * for creating a contract or a campaign for each channel, please call the "Retrieve details for
   * channel with support for contracts".
   *
   * @param search          A search term.
   * @param limit           Number of results to return per page.
   * @param offset          The initial index from which to return the results.
   * @param acceptLanguage  The language the client prefers.
   * @return Response from the API call
   */
  async listchannelswithsupportforcontracts(
    search?: string,
    limit?: number,
    offset?: number,
    acceptLanguage?: AcceptLanguageEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListchannelswithsupportforcontractsResponse>> {
    const req = this.createRequest('GET', '/products/channels/mocs/');
    const mapped = req.prepareArgs({
      search: [search, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      acceptLanguage: [acceptLanguage, optional(acceptLanguageEnumSchema)],
    });
    req.header('Accept-Language', mapped.acceptLanguage);
    req.query('search', mapped.search);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(
      listchannelswithsupportforcontractsResponseSchema,
      requestOptions
    );
  }

  /**
   * This endpoint exposes the details of a channel with support for contracts,as well as all the
   * required details for creating a contract or a campaign for each channel.
   *
   * @param channelId       ID of the channel
   * @param acceptLanguage  The language the client prefers.
   * @return Response from the API call
   */
  async retrievedetailsforchannelforthisCustomer(
    channelId: string,
    acceptLanguage?: AcceptLanguageEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Channel>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      channelId: [channelId, string()],
      acceptLanguage: [acceptLanguage, optional(acceptLanguageEnumSchema)],
    });
    req.header('Accept-Language', mapped.acceptLanguage);
    req.appendTemplatePath`/products/channels/mocs/${mapped.channelId}`;
    req.authenticate(false);
    return req.callAsJson(channelSchema, requestOptions);
  }

  /**
   * This endpoint exposes a list of contract available to a particular customer.
   *
   * @param xCustomerId   An identifier for the remote customer
   * @param limit         Amount of contracts returned
   * @param offset        Starting point
   * @return Response from the API call
   */
  async listcontractsavailableforacustomer(
    xCustomerId: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Listcontractsavailableforacustomerresponse>> {
    const req = this.createRequest('GET', '/contracts/');
    const mapped = req.prepareArgs({
      xCustomerId: [xCustomerId, string()],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.header('X-Customer-Id', mapped.xCustomerId);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(
      listcontractsavailableforacustomerresponseSchema,
      requestOptions
    );
  }

  /**
   * This endpoint creates a new customer contract. It requires a reference to a channel, a credential
   * payload, and the facets set for the contracted product.
   *
   * HAPI doesn't support contract editing, because job boards require the same credentials to be able to
   * delete already posted jobs via that contract at a later moment. Otherwise, deleting jobs would not
   * be possible. To edit contract credentials, the credentials need to be deleted first, and then
   * recreated. When deleted, all corresponding jobs can't be deleted anymore
   *
   * @param xCustomerId   An identifier for the remote customer
   * @param body
   * @return Response from the API call
   */
  async createanewcustomercontract(
    xCustomerId: string,
    body: PostContract,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Createanewcustomercontractresponse>> {
    const req = this.createRequest('POST', '/contracts/');
    const mapped = req.prepareArgs({
      xCustomerId: [xCustomerId, string()],
      body: [body, postContractSchema],
    });
    req.header('X-Customer-Id', mapped.xCustomerId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, '');
    return req.callAsJson(
      createanewcustomercontractresponseSchema,
      requestOptions
    );
  }

  /**
   * This endpoint deletes a contract.
   *
   * HAPI doesn't support contract editing, because job boards require the same credentials to be able
   * to delete already posted jobs via that contract at a later moment. Otherwise, deleting jobs would
   * not be possible. To edit contract credentials, the credentials need to be deleted first, and then
   * recreated. When deleted, all corresponding jobs can't be deleted anymore
   *
   * @param contractId
   * @param xCustomerId   An identifier for the remote customer
   * @return Response from the API call
   */
  async deleteacontract(
    contractId: string,
    xCustomerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      contractId: [contractId, string()],
      xCustomerId: [xCustomerId, string()],
    });
    req.header('X-Customer-Id', mapped.xCustomerId);
    req.appendTemplatePath`/contracts/${mapped.contractId}/`;
    return req.call(requestOptions);
  }

  /**
   * This endpoint retrieves the detail for a customer contract. It contains a reference to a channel, an
   * (encrypted) credential payload, and the facets set for the My Contracts product.
   *
   * @param contractId
   * @param xCustomerId   An identifier for the remote customer
   * @return Response from the API call
   */
  async retrieveContractdetailsbythisCustomer(
    contractId: string,
    xCustomerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Contract>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      contractId: [contractId, string()],
      xCustomerId: [xCustomerId, string()],
    });
    req.header('X-Customer-Id', mapped.xCustomerId);
    req.appendTemplatePath`/contracts/single/${mapped.contractId}/`;
    return req.callAsJson(contractSchema, requestOptions);
  }

  /**
   * This endpoint exposes a list of multiple contracts, if available to a specific customer.
   *
   * @param contractsIds
   * @param xCustomerId   An identifier for the remote customer
   * @param limit         Amount of contracts returned
   * @param offset        Starting point
   * @return Response from the API call
   */
  async retrievemultiplecontractsbythiscustomer(
    contractsIds: string[],
    xCustomerId: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Multipledetailsofcustomercontractsresponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      contractsIds: [contractsIds, array(string())],
      xCustomerId: [xCustomerId, string()],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.header('X-Customer-Id', mapped.xCustomerId);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.appendTemplatePath`/contracts/multiple/${mapped.contractsIds}/`;
    return req.callAsJson(
      multipledetailsofcustomercontractsresponseSchema,
      requestOptions
    );
  }

  /**
   * This endpoint exposes autocomplete items given a `channel_id` and a posting requirement name.
   *
   * @param channelId                channel_id (number, required)
   * @param postingRequirementName
   * @param xCustomerId              An identifier for the remote customer
   * @param body
   * @return Response from the API call
   */
  async listautocompletevaluesforpostingrequirement(
    channelId: number,
    postingRequirementName: string,
    xCustomerId: string,
    body: FacetAutocomplete,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Autocompletevaluesforpostingrequirementresponse[]>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      channelId: [channelId, number()],
      postingRequirementName: [postingRequirementName, string()],
      xCustomerId: [xCustomerId, string()],
      body: [body, facetAutocompleteSchema],
    });
    req.header('X-Customer-Id', mapped.xCustomerId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/contracts/posting-requirements/${mapped.channelId}/${mapped.postingRequirementName}/`;
    req.throwOn(400, ApiError, '');
    return req.callAsJson(
      array(autocompletevaluesforpostingrequirementresponseSchema),
      requestOptions
    );
  }
}
