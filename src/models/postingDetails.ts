/**
 * VONQ Hiring APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, number, object, optional, Schema, string } from '../schema';
import {
  EmploymentTypeEnum,
  employmentTypeEnumSchema,
} from './employmentTypeEnum';
import {
  PostingContactInfo,
  postingContactInfoSchema,
} from './postingContactInfo';
import {
  PostingOrganization,
  postingOrganizationSchema,
} from './postingOrganization';
import {
  PostingSalaryIndication,
  postingSalaryIndicationSchema,
} from './postingSalaryIndication';
import {
  PostingWeeklyWorkingHours,
  postingWeeklyWorkingHoursSchema,
} from './postingWeeklyWorkingHours';
import {
  PostingWorkingLocation,
  postingWorkingLocationSchema,
} from './postingWorkingLocation';

export interface PostingDetails {
  /** The title of the posting across the different Channels where the posting is going to be published. */
  title: string;
  /**
   * Full description of the job posting, including all possible sections
   * **Allowed tags:** `a[href|target], em, b, br, strong, i, li, ol, p, ul`
   */
  description: string;
  organization: PostingOrganization;
  workingLocation: PostingWorkingLocation;
  contactInfo?: PostingContactInfo;
  /** Numbers of years of experience required for this position */
  yearsOfExperience: number;
  /** The type of employment of the posting, whether it's a permanent position or a fixed time position */
  employmentType: EmploymentTypeEnum;
  weeklyWorkingHours: PostingWeeklyWorkingHours;
  salaryIndication: PostingSalaryIndication;
  /** Link to the page with the description of the job */
  jobPageUrl: string;
  /** Link to the page where the candidate needs to be directed when applying for a position */
  applicationUrl: string;
}

export const postingDetailsSchema: Schema<PostingDetails> = object({
  title: ['title', string()],
  description: ['description', string()],
  organization: ['organization', lazy(() => postingOrganizationSchema)],
  workingLocation: [
    'workingLocation',
    lazy(() => postingWorkingLocationSchema),
  ],
  contactInfo: ['contactInfo', optional(lazy(() => postingContactInfoSchema))],
  yearsOfExperience: ['yearsOfExperience', number()],
  employmentType: ['employmentType', employmentTypeEnumSchema],
  weeklyWorkingHours: [
    'weeklyWorkingHours',
    lazy(() => postingWeeklyWorkingHoursSchema),
  ],
  salaryIndication: [
    'salaryIndication',
    lazy(() => postingSalaryIndicationSchema),
  ],
  jobPageUrl: ['jobPageUrl', string()],
  applicationUrl: ['applicationUrl', string()],
});
