/**
 * VONQ Hiring APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema, string } from '../schema';
import { CampaignPosting, campaignPostingSchema } from './campaignPosting';
import {
  OrderedProductsGetElement,
  orderedProductsGetElementSchema,
} from './orderedProductsGetElement';
import { PostingDetails, postingDetailsSchema } from './postingDetails';
import { RecruiterInfo, recruiterInfoSchema } from './recruiterInfo';
import { TargetGroup, targetGroupSchema } from './targetGroup';

export interface Campaign {
  /**
   * A vendor-related unique identification for the Company that's making the order. Doesn't affect the
   * order process at all, but provides a method for later filtering by this identification. It's also
   * used when creating a unified report of Campaign orders made in a period of time.
   */
  companyId: string;
  /**
   * A vendor-related Reference number for the order. This could be a PO number or an Invoice number.
   * Doesn't affect the order process at all, but provides a way for the ATS to identify the specific
   * order for their internal billing process
   * Maximum length of this field is 80 symbols
   */
  orderReference?: string;
  /**
   * Recruiter is the person using the ATS to create the Campaign and it's generally part of the Company whose Id
   * we request first.
   */
  recruiterInfo: RecruiterInfo;
  /**
   * Campaign name as it's going to be listed. Doesn't have to resemble the Posting Title.
   * For example, the Campaign name could be **Software Development Manager** while the Posting
   * title could be **Want to lead a Team of Software Developers? Join us**
   */
  campaignName?: string;
  postingDetails: PostingDetails;
  targetGroup: TargetGroup;
  /** A list of the Products selected by the user. */
  orderedProducts: string[];
  /** This part contains information of the ordered products. */
  orderedProductsSpecs?: OrderedProductsGetElement[];
  postings?: CampaignPosting[];
}

export const campaignSchema: Schema<Campaign> = object({
  companyId: ['companyId', string()],
  orderReference: ['orderReference', optional(string())],
  recruiterInfo: ['recruiterInfo', lazy(() => recruiterInfoSchema)],
  campaignName: ['campaignName', optional(string())],
  postingDetails: ['postingDetails', lazy(() => postingDetailsSchema)],
  targetGroup: ['targetGroup', lazy(() => targetGroupSchema)],
  orderedProducts: ['orderedProducts', array(string())],
  orderedProductsSpecs: [
    'orderedProductsSpecs',
    optional(array(lazy(() => orderedProductsGetElementSchema))),
  ],
  postings: ['postings', optional(array(lazy(() => campaignPostingSchema)))],
});
