/**
 * VONQ Hiring APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Channel, channelSchema } from './channel';
import { Industry, industrySchema } from './industry';
import { JobFunction, jobFunctionSchema } from './jobFunction';
import { Location, locationSchema } from './location';
import { Price, priceSchema } from './price';
import { TimeToProcess, timeToProcessSchema } from './timeToProcess';
import { TimeToSetup, timeToSetupSchema } from './timeToSetup';

export interface Product {
  title?: string;
  locations?: Location[];
  jobFunctions?: JobFunction[];
  industries?: Industry[];
  description?: string;
  homepage?: string;
  logoUrl?: string;
  logoSquareUrl?: string;
  logoRectangleUrl?: string;
  duration?: string;
  timeToProcess?: TimeToProcess;
  timeToSetup?: TimeToSetup;
  productId?: string;
  /** the price to be displayed to customers */
  vonqPrice?: Price[];
  ratecardPrice?: Price[];
  type?: string;
  crossPostings?: string[];
  channel?: Channel;
  /** The product's audience group (niche/generic) */
  audienceGroup?: string;
  /** is My Contract enabled for the channel */
  mcEnabled?: boolean;
  /** is the product available only for My Contract order */
  mcOnly?: boolean;
  /** is the product available for order. a campaign cannot be ordered with a product having `allow_orders` set to `false`. */
  allowOrders?: boolean;
}

export const productSchema: Schema<Product> = object({
  title: ['title', optional(string())],
  locations: ['locations', optional(array(lazy(() => locationSchema)))],
  jobFunctions: [
    'job_functions',
    optional(array(lazy(() => jobFunctionSchema))),
  ],
  industries: ['industries', optional(array(lazy(() => industrySchema)))],
  description: ['description', optional(string())],
  homepage: ['homepage', optional(string())],
  logoUrl: ['logo_url', optional(string())],
  logoSquareUrl: ['logo_square_url', optional(string())],
  logoRectangleUrl: ['logo_rectangle_url', optional(string())],
  duration: ['duration', optional(string())],
  timeToProcess: ['time_to_process', optional(lazy(() => timeToProcessSchema))],
  timeToSetup: ['time_to_setup', optional(lazy(() => timeToSetupSchema))],
  productId: ['product_id', optional(string())],
  vonqPrice: ['vonq_price', optional(array(lazy(() => priceSchema)))],
  ratecardPrice: ['ratecard_price', optional(array(lazy(() => priceSchema)))],
  type: ['type', optional(string())],
  crossPostings: ['cross_postings', optional(array(string()))],
  channel: ['channel', optional(lazy(() => channelSchema))],
  audienceGroup: ['audience_group', optional(string())],
  mcEnabled: ['mc_enabled', optional(boolean())],
  mcOnly: ['mc_only', optional(boolean())],
  allowOrders: ['allow_orders', optional(boolean())],
});
